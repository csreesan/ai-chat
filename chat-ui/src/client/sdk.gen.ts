// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetChatMessagesData, GetChatMessagesResponse, SubmitChatMessageData, SubmitChatMessageResponse, SubmitChatMessageError, SubmitChatMessageCompareData, SubmitChatMessageCompareResponse, SubmitChatMessageCompareError, SubmitChatMessageSelectData, SubmitChatMessageSelectError, GetThreadsData, GetThreadsResponse, CreateThreadData, CreateThreadResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all chat messages
 */
export const getChatMessages = <ThrowOnError extends boolean = false>(options: Options<GetChatMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatMessagesResponse, unknown, ThrowOnError>({
        url: '/thread/{thread_id}/chat',
        ...options
    });
};

/**
 * Submit a chat message and get a response
 */
export const submitChatMessage = <ThrowOnError extends boolean = false>(options: Options<SubmitChatMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitChatMessageResponse, SubmitChatMessageError, ThrowOnError>({
        url: '/thread/{thread_id}/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Submit a chat message and get a response from another model
 */
export const submitChatMessageCompare = <ThrowOnError extends boolean = false>(options: Options<SubmitChatMessageCompareData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitChatMessageCompareResponse, SubmitChatMessageCompareError, ThrowOnError>({
        url: '/thread/{thread_id}/chat/compare',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Submit a chat message selection
 */
export const submitChatMessageSelect = <ThrowOnError extends boolean = false>(options: Options<SubmitChatMessageSelectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SubmitChatMessageSelectError, ThrowOnError>({
        url: '/thread/{thread_id}/chat/compare/select',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all threads
 */
export const getThreads = <ThrowOnError extends boolean = false>(options?: Options<GetThreadsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetThreadsResponse, unknown, ThrowOnError>({
        url: '/thread',
        ...options
    });
};

/**
 * Create a new thread
 */
export const createThread = <ThrowOnError extends boolean = false>(options?: Options<CreateThreadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateThreadResponse, unknown, ThrowOnError>({
        url: '/thread',
        ...options
    });
};